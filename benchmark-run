#!/bin/bash -eu

prog="$(basename $0)"
nicedec=10
ntimes=1

function set_smt() {
    [[ $(cat /sys/devices/system/cpu/smt/control) == notsupported ]] && return
    local on=$1 sw
    if ((on)); then sw=on; else sw=off; fi
    echo $sw | tee /sys/devices/system/cpu/smt/control >/dev/null
}

declare -a orig_modes=()

function save_modes() {
    local -r gov=$(cpupower -c all frequency-info | sed -nr '/"/s/.*"(.*)".*/\1/p' | head -1)
    local -r sp=$(sysctl kernel.randomize_va_space | sed -n 's/.*= *//p')
    orig_modes+=($gov)
    orig_modes+=($sp)
}

function set_modes() {
    local -r benchmark_mode=$1
    local -r inv=$((!benchmark_mode))

    local gov=performance sp=0
    if (( inv )); then
        gov=${orig_modes[0]}
        sp=${orig_modes[1]}
    fi
    cpupower -c all frequency-set -g $gov >/dev/null
    sysctl kernel.randomize_va_space=$sp >/dev/null

    # depends on the arg
    ## Turbo Boost (Disable for benchmark)
    x86_energy_perf_policy -c all -t $inv
    ## Hyper Threading (Disable for benchmark)
    set_smt $inv
}

function run_cmd() {
    # Ensure to back to normal
    save_modes
    trap 'set_modes 0' EXIT # Back to usual, non-benchmark mode
    set_modes 1 # Switch to benchmark mode

    for i in $(seq $ntimes); do
        # nice: Set nice value (Decrease (higher priority) for benchmark), needs to be root
        # taskset: Limit used CPU cores (Fix for benchmark), better not to be root
        nice -n -$nicedec \
        sudo PATH="${origpath:-$PATH}" -u "${origuser:-$USER}" \
        taskset -c 0 "$@"
    done
}

function message() {
    echo "$prog: $@" >&2
}

function ensure_su() {
    if (( $(id -u) )); then
        exec sudo origpath="$PATH" origuser="$USER" "$0" "$@"
    fi
}

function main() {
    ensure_su "$@"

    if (( $# == 0 )); then
        message "one or more arguments needed to be run"
        exit 1
    fi

    while getopts n: opt "$@"; do
        case $opt in
            n)
                ntimes=$OPTARG
                ;;
            '?')
                exit 1
                ;;
        esac
    done

    shift $((OPTIND-1))
    run_cmd "$@"
}

main "$@"
