#!/bin/bash -eu

prog="$(basename $0)"
nicedec=10
ntimes=1

function set_smt() {
    [[ $( cat /sys/devices/system/cpu/smt/control ) == notsupported ]] && return
    local sw
    if ((benchmark_mode)); then sw=off; else sw=on; fi
    echo $sw | tee /sys/devices/system/cpu/smt/control >/dev/null
}

function set_modes() {
    local -r benchmark_mode=$1
    local -r inv=$((!benchmark_mode))

    # ensure part; almost has no side effects for performance-oriented env
    cpupower -c all frequency-set -g performance >/dev/null
    sysctl kernel.randomize_va_space=0 >/dev/null

    # depends on the arg
    ## Turbo Boost (Disable for benchmark)
    x86_energy_perf_policy -c all -t $inv
    ## Hyper Threading (Disable for benchmark)
    set_smt $benchmark_mode
}

function run_cmd() {
    # Ensure to back to normal
    trap 'set_smt 0; exit 1' HUP INT QUIT TRAP TERM
    set_modes 1 # Switch to benchmark mode

    for i in {1..$ntimes}; do
        # nice: Nice value (Decrease (higher priority) for benchmark), needs to be root
        # taskset: Limit used CPU cores (Fix for benchmark), better not to be root
        nice -n -$nicedec \
        sudo PATH="${origpath:-$PATH}" -u $USER \
        taskset -c 0 "$@"
    done

    set_modes 0 # Back to usual, non-benchmark mode
}

function message() {
    echo "$prog: $@" >&2
}

function ensure_su() {
    if (( $(id -u) )); then
        exec sudo origpath="$PATH" "$0" "$@"
    fi
}

function main() {
    ensure_su "$@"

    if (( $# == 0 )); then
        message "one or more arguments needed to be run"
        exit 1
    fi

    while getopts n: opt "$@"; do
        case $opt in
            n)
                ntimes=$OPTARG
                ;;
            '?')
                exit 1
                ;;
        esac
    done

    shift $((OPTIND-1))
    run_cmd "$@"
}

main "$@"
